// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const incrementCounter = `-- name: IncrementCounter :exec
update
    counter
set
    val = val + 1
where
    id = $1
`

func (q *Queries) IncrementCounter(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementCounter, id)
	return err
}

const insertCounter = `-- name: InsertCounter :exec
insert into
    counter (id, val)
values ($1, $2)
`

type InsertCounterParams struct {
	ID  uuid.UUID `json:"id"`
	Val int32     `json:"val"`
}

func (q *Queries) InsertCounter(ctx context.Context, arg InsertCounterParams) error {
	_, err := q.db.ExecContext(ctx, insertCounter, arg.ID, arg.Val)
	return err
}

const selectCounter = `-- name: SelectCounter :one
select
    val
from
    counter
where
    id = $1
`

func (q *Queries) SelectCounter(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, selectCounter, id)
	var val int32
	err := row.Scan(&val)
	return val, err
}

const updateCounter = `-- name: UpdateCounter :exec
update
    counter
set
    val = $1
where
    id = $2
`

type UpdateCounterParams struct {
	Val int32     `json:"val"`
	ID  uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCounter(ctx context.Context, arg UpdateCounterParams) error {
	_, err := q.db.ExecContext(ctx, updateCounter, arg.Val, arg.ID)
	return err
}
