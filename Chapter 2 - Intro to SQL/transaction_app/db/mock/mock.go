// Code generated by MockGen. DO NOT EDIT.
// Source: db/querier.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	db "g2r-api/db"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockQuerier is a mock of Querier interface
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// DeleteEventConfPending mocks base method
func (m *MockQuerier) DeleteEventConfPending(ctx context.Context, messageid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventConfPending", ctx, messageid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventConfPending indicates an expected call of DeleteEventConfPending
func (mr *MockQuerierMockRecorder) DeleteEventConfPending(ctx, messageid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventConfPending", reflect.TypeOf((*MockQuerier)(nil).DeleteEventConfPending), ctx, messageid)
}

// DeleteNewUserAccountRequest mocks base method
func (m *MockQuerier) DeleteNewUserAccountRequest(ctx context.Context, verificationtoken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNewUserAccountRequest", ctx, verificationtoken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNewUserAccountRequest indicates an expected call of DeleteNewUserAccountRequest
func (mr *MockQuerierMockRecorder) DeleteNewUserAccountRequest(ctx, verificationtoken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNewUserAccountRequest", reflect.TypeOf((*MockQuerier)(nil).DeleteNewUserAccountRequest), ctx, verificationtoken)
}

// DeletePassportApplicationDocument mocks base method
func (m *MockQuerier) DeletePassportApplicationDocument(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePassportApplicationDocument", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePassportApplicationDocument indicates an expected call of DeletePassportApplicationDocument
func (mr *MockQuerierMockRecorder) DeletePassportApplicationDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePassportApplicationDocument", reflect.TypeOf((*MockQuerier)(nil).DeletePassportApplicationDocument), ctx, id)
}

// DeletePasswordResetRequest mocks base method
func (m *MockQuerier) DeletePasswordResetRequest(ctx context.Context, verificationtoken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordResetRequest", ctx, verificationtoken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordResetRequest indicates an expected call of DeletePasswordResetRequest
func (mr *MockQuerierMockRecorder) DeletePasswordResetRequest(ctx, verificationtoken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordResetRequest", reflect.TypeOf((*MockQuerier)(nil).DeletePasswordResetRequest), ctx, verificationtoken)
}

// DeleteTenantAddress mocks base method
func (m *MockQuerier) DeleteTenantAddress(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenantAddress", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTenantAddress indicates an expected call of DeleteTenantAddress
func (mr *MockQuerierMockRecorder) DeleteTenantAddress(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenantAddress", reflect.TypeOf((*MockQuerier)(nil).DeleteTenantAddress), ctx, id)
}

// InsertPassportApplication mocks base method
func (m *MockQuerier) InsertPassportApplication(ctx context.Context, arg db.InsertPassportApplicationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPassportApplication", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPassportApplication indicates an expected call of InsertPassportApplication
func (mr *MockQuerierMockRecorder) InsertPassportApplication(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPassportApplication", reflect.TypeOf((*MockQuerier)(nil).InsertPassportApplication), ctx, arg)
}

// InsertPassportApplicationDocument mocks base method
func (m *MockQuerier) InsertPassportApplicationDocument(ctx context.Context, arg db.InsertPassportApplicationDocumentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPassportApplicationDocument", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPassportApplicationDocument indicates an expected call of InsertPassportApplicationDocument
func (mr *MockQuerierMockRecorder) InsertPassportApplicationDocument(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPassportApplicationDocument", reflect.TypeOf((*MockQuerier)(nil).InsertPassportApplicationDocument), ctx, arg)
}

// InsertTenantAddress mocks base method
func (m *MockQuerier) InsertTenantAddress(ctx context.Context, arg db.InsertTenantAddressParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTenantAddress", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTenantAddress indicates an expected call of InsertTenantAddress
func (mr *MockQuerierMockRecorder) InsertTenantAddress(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTenantAddress", reflect.TypeOf((*MockQuerier)(nil).InsertTenantAddress), ctx, arg)
}

// InsertUser mocks base method
func (m *MockQuerier) InsertUser(ctx context.Context, arg db.InsertUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockQuerierMockRecorder) InsertUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockQuerier)(nil).InsertUser), ctx, arg)
}

// SelectNewUserAccountRequest mocks base method
func (m *MockQuerier) SelectNewUserAccountRequest(ctx context.Context, verificationtoken string) (db.SelectNewUserAccountRequestRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNewUserAccountRequest", ctx, verificationtoken)
	ret0, _ := ret[0].(db.SelectNewUserAccountRequestRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectNewUserAccountRequest indicates an expected call of SelectNewUserAccountRequest
func (mr *MockQuerierMockRecorder) SelectNewUserAccountRequest(ctx, verificationtoken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNewUserAccountRequest", reflect.TypeOf((*MockQuerier)(nil).SelectNewUserAccountRequest), ctx, verificationtoken)
}

// SelectPassportApplication mocks base method
func (m *MockQuerier) SelectPassportApplication(ctx context.Context, id uuid.UUID) (db.PassportApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPassportApplication", ctx, id)
	ret0, _ := ret[0].(db.PassportApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPassportApplication indicates an expected call of SelectPassportApplication
func (mr *MockQuerierMockRecorder) SelectPassportApplication(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPassportApplication", reflect.TypeOf((*MockQuerier)(nil).SelectPassportApplication), ctx, id)
}

// SelectPassportApplicationDocument mocks base method
func (m *MockQuerier) SelectPassportApplicationDocument(ctx context.Context, id uuid.UUID) (db.PassportApplicationDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPassportApplicationDocument", ctx, id)
	ret0, _ := ret[0].(db.PassportApplicationDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPassportApplicationDocument indicates an expected call of SelectPassportApplicationDocument
func (mr *MockQuerierMockRecorder) SelectPassportApplicationDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPassportApplicationDocument", reflect.TypeOf((*MockQuerier)(nil).SelectPassportApplicationDocument), ctx, id)
}

// SelectPassportApplicationDocuments mocks base method
func (m *MockQuerier) SelectPassportApplicationDocuments(ctx context.Context, passportapplicationid uuid.UUID) ([]db.PassportApplicationDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPassportApplicationDocuments", ctx, passportapplicationid)
	ret0, _ := ret[0].([]db.PassportApplicationDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPassportApplicationDocuments indicates an expected call of SelectPassportApplicationDocuments
func (mr *MockQuerierMockRecorder) SelectPassportApplicationDocuments(ctx, passportapplicationid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPassportApplicationDocuments", reflect.TypeOf((*MockQuerier)(nil).SelectPassportApplicationDocuments), ctx, passportapplicationid)
}

// SelectPassportApplicationsForTenant mocks base method
func (m *MockQuerier) SelectPassportApplicationsForTenant(ctx context.Context, tenantid uuid.UUID) ([]db.PassportApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPassportApplicationsForTenant", ctx, tenantid)
	ret0, _ := ret[0].([]db.PassportApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPassportApplicationsForTenant indicates an expected call of SelectPassportApplicationsForTenant
func (mr *MockQuerierMockRecorder) SelectPassportApplicationsForTenant(ctx, tenantid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPassportApplicationsForTenant", reflect.TypeOf((*MockQuerier)(nil).SelectPassportApplicationsForTenant), ctx, tenantid)
}

// SelectPasswordResetRequest mocks base method
func (m *MockQuerier) SelectPasswordResetRequest(ctx context.Context, verificationtoken string) (db.PasswordResetRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPasswordResetRequest", ctx, verificationtoken)
	ret0, _ := ret[0].(db.PasswordResetRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPasswordResetRequest indicates an expected call of SelectPasswordResetRequest
func (mr *MockQuerierMockRecorder) SelectPasswordResetRequest(ctx, verificationtoken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPasswordResetRequest", reflect.TypeOf((*MockQuerier)(nil).SelectPasswordResetRequest), ctx, verificationtoken)
}

// SelectTenantAddress mocks base method
func (m *MockQuerier) SelectTenantAddress(ctx context.Context, id uuid.UUID) (db.TenantAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTenantAddress", ctx, id)
	ret0, _ := ret[0].(db.TenantAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTenantAddress indicates an expected call of SelectTenantAddress
func (mr *MockQuerierMockRecorder) SelectTenantAddress(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTenantAddress", reflect.TypeOf((*MockQuerier)(nil).SelectTenantAddress), ctx, id)
}

// SelectTenantAddressesByTenant mocks base method
func (m *MockQuerier) SelectTenantAddressesByTenant(ctx context.Context, tenantid uuid.UUID) ([]db.TenantAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTenantAddressesByTenant", ctx, tenantid)
	ret0, _ := ret[0].([]db.TenantAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTenantAddressesByTenant indicates an expected call of SelectTenantAddressesByTenant
func (mr *MockQuerierMockRecorder) SelectTenantAddressesByTenant(ctx, tenantid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTenantAddressesByTenant", reflect.TypeOf((*MockQuerier)(nil).SelectTenantAddressesByTenant), ctx, tenantid)
}

// SelectTenantById mocks base method
func (m *MockQuerier) SelectTenantById(ctx context.Context, id uuid.UUID) (db.SelectTenantByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTenantById", ctx, id)
	ret0, _ := ret[0].(db.SelectTenantByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTenantById indicates an expected call of SelectTenantById
func (mr *MockQuerierMockRecorder) SelectTenantById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTenantById", reflect.TypeOf((*MockQuerier)(nil).SelectTenantById), ctx, id)
}

// SelectTenantInvitation mocks base method
func (m *MockQuerier) SelectTenantInvitation(ctx context.Context, id uuid.UUID) (db.TenantInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTenantInvitation", ctx, id)
	ret0, _ := ret[0].(db.TenantInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTenantInvitation indicates an expected call of SelectTenantInvitation
func (mr *MockQuerierMockRecorder) SelectTenantInvitation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTenantInvitation", reflect.TypeOf((*MockQuerier)(nil).SelectTenantInvitation), ctx, id)
}

// SelectUserAccountByEmail mocks base method
func (m *MockQuerier) SelectUserAccountByEmail(ctx context.Context, emailaddress string) (db.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserAccountByEmail", ctx, emailaddress)
	ret0, _ := ret[0].(db.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserAccountByEmail indicates an expected call of SelectUserAccountByEmail
func (mr *MockQuerierMockRecorder) SelectUserAccountByEmail(ctx, emailaddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserAccountByEmail", reflect.TypeOf((*MockQuerier)(nil).SelectUserAccountByEmail), ctx, emailaddress)
}

// SelectUserAccountById mocks base method
func (m *MockQuerier) SelectUserAccountById(ctx context.Context, id uuid.UUID) (db.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserAccountById", ctx, id)
	ret0, _ := ret[0].(db.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserAccountById indicates an expected call of SelectUserAccountById
func (mr *MockQuerierMockRecorder) SelectUserAccountById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserAccountById", reflect.TypeOf((*MockQuerier)(nil).SelectUserAccountById), ctx, id)
}

// SelectUserAccountByPhoneNumber mocks base method
func (m *MockQuerier) SelectUserAccountByPhoneNumber(ctx context.Context, phonenumber sql.NullString) (db.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserAccountByPhoneNumber", ctx, phonenumber)
	ret0, _ := ret[0].(db.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserAccountByPhoneNumber indicates an expected call of SelectUserAccountByPhoneNumber
func (mr *MockQuerierMockRecorder) SelectUserAccountByPhoneNumber(ctx, phonenumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserAccountByPhoneNumber", reflect.TypeOf((*MockQuerier)(nil).SelectUserAccountByPhoneNumber), ctx, phonenumber)
}

// UpdatePassportApplication mocks base method
func (m *MockQuerier) UpdatePassportApplication(ctx context.Context, arg db.UpdatePassportApplicationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassportApplication", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassportApplication indicates an expected call of UpdatePassportApplication
func (mr *MockQuerierMockRecorder) UpdatePassportApplication(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassportApplication", reflect.TypeOf((*MockQuerier)(nil).UpdatePassportApplication), ctx, arg)
}

// UpdatePassportApplicationDocument mocks base method
func (m *MockQuerier) UpdatePassportApplicationDocument(ctx context.Context, arg db.UpdatePassportApplicationDocumentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassportApplicationDocument", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassportApplicationDocument indicates an expected call of UpdatePassportApplicationDocument
func (mr *MockQuerierMockRecorder) UpdatePassportApplicationDocument(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassportApplicationDocument", reflect.TypeOf((*MockQuerier)(nil).UpdatePassportApplicationDocument), ctx, arg)
}

// UpdateTenantAddress mocks base method
func (m *MockQuerier) UpdateTenantAddress(ctx context.Context, arg db.UpdateTenantAddressParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTenantAddress", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTenantAddress indicates an expected call of UpdateTenantAddress
func (mr *MockQuerierMockRecorder) UpdateTenantAddress(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTenantAddress", reflect.TypeOf((*MockQuerier)(nil).UpdateTenantAddress), ctx, arg)
}

// UpdateUser mocks base method
func (m *MockQuerier) UpdateUser(ctx context.Context, arg db.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockQuerierMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockQuerier)(nil).UpdateUser), ctx, arg)
}

// UpdateUserPasswordHash mocks base method
func (m *MockQuerier) UpdateUserPasswordHash(ctx context.Context, arg db.UpdateUserPasswordHashParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPasswordHash", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPasswordHash indicates an expected call of UpdateUserPasswordHash
func (mr *MockQuerierMockRecorder) UpdateUserPasswordHash(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPasswordHash", reflect.TypeOf((*MockQuerier)(nil).UpdateUserPasswordHash), ctx, arg)
}

// UpsertNewUserAccountRequest mocks base method
func (m *MockQuerier) UpsertNewUserAccountRequest(ctx context.Context, arg db.UpsertNewUserAccountRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNewUserAccountRequest", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNewUserAccountRequest indicates an expected call of UpsertNewUserAccountRequest
func (mr *MockQuerierMockRecorder) UpsertNewUserAccountRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNewUserAccountRequest", reflect.TypeOf((*MockQuerier)(nil).UpsertNewUserAccountRequest), ctx, arg)
}

// UpsertPasswordResetRequest mocks base method
func (m *MockQuerier) UpsertPasswordResetRequest(ctx context.Context, arg db.UpsertPasswordResetRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPasswordResetRequest", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPasswordResetRequest indicates an expected call of UpsertPasswordResetRequest
func (mr *MockQuerierMockRecorder) UpsertPasswordResetRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPasswordResetRequest", reflect.TypeOf((*MockQuerier)(nil).UpsertPasswordResetRequest), ctx, arg)
}

// UpsertTenant mocks base method
func (m *MockQuerier) UpsertTenant(ctx context.Context, arg db.UpsertTenantParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTenant", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTenant indicates an expected call of UpsertTenant
func (mr *MockQuerierMockRecorder) UpsertTenant(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTenant", reflect.TypeOf((*MockQuerier)(nil).UpsertTenant), ctx, arg)
}
